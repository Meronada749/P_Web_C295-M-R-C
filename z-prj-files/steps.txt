npm install

.env edit

TZ=UTC
PORT=3333
HOST=localhost
LOG_LEVEL=info
APP_KEY=
NODE_ENV=development
DB_HOST=127.0.0.1
DB_PORT=6033
DB_USER=root
DB_PASSWORD=root
DB_DATABASE=db_library

node ace generate:key

node ace make:model -m Book

do model and migrations

//----------------------------------------------------------Model-----------------------------------------------//
  @column()
  declare title: string

  @column()
  declare numberOfPages: number

  // Foreign key
  @column()
  declare categoryId: number

  //Relation : one book belongs to one category
  @belongsTo(() => Category)
  declare category: BelongsTo<typeof Category>

  @hasMany(() => Book)
  declare book: HasMany<typeof Book>

  // Relation : user -> teacher
  @hasOne(() => Teacher)
  declare teacher: HasOne<typeof Teacher>

//----------------------------------------------------------Migration-----------------------------------------------//
    table.increments('id')

    table.string('title').notNullable().unique()
    table.integer('number_of_pages')
    table.string('pdf_link').unique()
    table.text('abstract')
    table.string('editor')
    table.integer('edition_year')
    table.string('image_path')

    // Relation : 1 book â†’ 1 category
    // table
    //   .integer('category_id')
    //   .unsigned()
    //   .references('id')
    //   .inTable('categories')
    //   .onDelete('CASCADE')


docker container exec -it mysql-container mysql -u root -proot
create database db_library;
use db_library;

(node ace migration:fresh --seed)


node ace make:seeder Book
//----------------------------------------------------------Seeder-----------------------------------------------//
    await TeacherFactory.createMany(10) or 

    const teachers = await Teacher.all()
    await ClassGroup.createMany([
      {
        name: 'CIN1A',
        teacherId: teachers[0].id,
      },
      { name: 'CIN1B', teacherId: teachers[0].id },
      { name: 'CIN1C', teacherId: teachers[1].id },
      { name: 'FID1', teacherId: teachers[1].id },
      { name: 'FID2', teacherId: teachers[2].id },
      { name: 'CID2A', teacherId: teachers[2].id },
      { name: 'CID2B', teacherId: teachers[3].id },
    ])

node ace make:factory Book
//----------------------------------------------------------Factory-----------------------------------------------//

    name: faker.person.lastName(),
    firstname: faker.person.firstName(),


node ace make:validator Book
//----------------------------------------------------------Validator-----------------------------------------------//
    name: vine.string().minLength(2).maxLength(255),
    firstname: vine.string().minLength(2).maxLength(255),


node ace make:controller -r Book 
//----------------------------------------------------------Controller-----------------------------------------------//
[index, store(validator), show, update(validator), destroy]


start/routes
//----------------------------------------------------------Routes-----------------------------------------------//
router.resource('students', StudentsController).apiOnly()

(node ace list:routes) just to check list of routes



//----------------------------------------------------------Roles-----------------------------------------------//

npm install @adonisjs/bouncer
node ace configure @adonisjs/bouncer

user routes
validator
controller